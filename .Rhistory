activity <- read.csv(unz("activity.zip", "activity.csv"))
dim(activity)
View(activity)
names(activity)
with(activity, hist(steps))
with(activity, hist(steps, rm.na = TRUE))
with(activity, hist(!is.na(steps))
with(activity, hist(!is.na(steps)))
table(activity$steps)
summary(activity$steps)
names(activity)
colMeans(is.na(activity))
with(activity, hist(steps))
with(activity, hist(!is.na(steps))
with(activity, hist(!is.na(steps)))
with(activity, hist(steps))
hist(!is.na(activity$steps))
truehist(activity$steps)
hist(activity$steps)
View(activity)
dim(activity)
names(activity)
colMeans(is.na(activity))
str(activity$steps)
str(activity$steps)
summary(activity$steps)
boxplot(activity$steps)
boxplot(log10(activity$steps + 1))
class(activity)
class(colnames(activity))
hist(na.omit(activity$steps))
lapply(activity, class)
sapply(activity, class)
activity$date <- as.Date(activity$date, format = "%y %m %d")
sapply(activity, class)
hist(na.omit(activity$steps))
library(zoo)
unique(activity$date)
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity$date <- as.Date(activity$date, format = "%y/%m/%d")
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity$date <- as.Date(activity$date, format = "%Y/%m/%d")
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity$date <- as.Date(activity$date, format = "%Y/%m/%d")
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
sapply(activity, class)
table(unique(activity$date))
plot(table(unique(activity$date)))
hist(table(unique(activity$date)))
barplot(table(unique(activity$date)))
table(unique(activity$date))
count(activity$date)
sum(activity$date)
sum(unique(activity$date))
length(unique(activity$date))
length(unique(diff(activity$date)))
is.regular(activity$date)
activity$zoo_date <- with(activity, zoo(steps, date))
hist(na.omit(activity$steps))
aggregate(steps ~ date, data = activity, FUN = sum)
hist(aggregate(steps ~ date, data = activity, FUN = sum)
hist(aggregate(steps ~ date, data = activity, FUN = sum))
steps_day <- aggregate(steps ~ date, data = activity, FUN = sum)
steps_day
hist(steps_day)
hist(as.numeric(steps_day))
View(steps_day)
hist(steps_day$steps)
aggregate(steps ~ date, data = activity, FUN = mean)
aggregate(steps ~ date, data = activity, FUN = median)
rm(activity$zoo_date)
rm("activity$zoo_date")
activity$zoo_date)
activity$zoo_date <- NULL
install.packages("xtable")
install.packages("xtable")
library(xtable)
```{r, results = "asis"}
```{r showtable, results = "asis"}
steps_day <- xtable(aggregate(steps ~ date, data = activity, FUN = sum))
print(steps_day, type = "html")
print(steps_day$steps, type = "html")
steps_day <- xtable(aggregate(steps ~ date, rm.na = TRUE, data = activity, FUN = sum))
steps_day <- xtable(aggregate(steps ~ date, rm.na = TRUE, data = activity, FUN = sum))
print(steps_day$steps, type = "html")
hist(steps_day$steps)
aggregate(steps ~ date, data = activity, FUN = mean)
aggregate(steps ~ date, data = activity, FUN = median)
aggregate(steps ~ date, data = activity, rm.na = TRUE, FUN = median)
aggregate(!is.na(steps) ~ date, data = activity, FUN = mean)
aggregate(steps ~ date, data = activity, FUN = mean)
aggregate(steps ~ date, data = activity, FUN = median)
```{r, results="hide"}
print(steps_day)
steps_day
print(steps_day)
steps_day
colMeans(is.na(activity$steps))
colMeans(is.na(activity))
steps_day <- aggregate(steps ~ date, rm.na = TRUE, data = activity, FUN = sum))
steps_day <- aggregate(steps ~ date, rm.na = TRUE, data = activity, FUN = sum)
q
q()
library(zoo)
activity$zoo_steps <- zoo(activity$steps, activity$interval)
zoo_steps
activity$zoo_steps
plot(activity$zoo_steps)
plot(activity$zoo_steps, type = "l")
plot(aggregate(steps ~ date, data = activity, FUN = mean), type = "l")
plot(aggregate(steps ~ interval, data = activity, FUN = mean), type = "l")
activity$zoo_steps <- NULL
?seq()
hist(steps_day$steps, xaxt = "n")
axis(1, at = seq(0, 53, by = 288))
axis(1, at = seq(0, 53, by = 288), las = 2)
hist(steps_day$steps, xaxt = "n")
axis(1, c(0, 288), c("Day1", "Day2"))
axis(1, at = seq(0, 53, by = 288), las = 2)
?hist()
hist(steps_day$steps, xaxt = "n", breaks = 53)
hist(steps_day$steps, xaxt = "n", breaks = 53, xlab = "Days")
hist(steps_day$steps, xaxt = "n", breaks = 53, xlab = "Days", ylab = Number of steps)
hist(steps_day$steps, xaxt = "n", breaks = 53, xlab = "Days", ylab = "Number of steps")
sum(unique(is.regular(activity$date)))
unique(is.regular(activity$date))
sum(unique(activity$date))
unique(activity$date)
hist(steps_day$steps, xaxt = "n", breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(steps_day$steps, breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(steps_day, breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(as.numeric(steps_day), breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(na.omit(steps_day$steps), xaxt = "n", breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(na.omit(steps_day$steps), xaxt = "n", breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(aggregate(steps ~ date, rm.na = TRUE, data = activity, FUN = sum))
hist(as.numeric(aggregate(steps ~ date, rm.na = TRUE, data = activity, FUN = sum)))
axis(1, at = seq(0, 61, by = 1))
axis(1, xaxp = c(0, 61, 1))
hist(steps_day$steps, yayt = "n", xaxt = "n", breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(steps_day$steps, yaxt = "n", xaxt = "n", breaks = 61, xlab = "Days", ylab = "Number of steps")
hist(steps_day$steps, xaxt = "n", breaks = 61, xlab = "Days", ylab = "Number of steps")
plot(steps_day)
hist(plot(steps_day))
plot(steps_day, type = "h")
plot(steps_day, type = "h", lwd = 10)
plot(steps_day, type = "h", lwd = 2)
plot(steps_day, type = "h", lwd = 3)
plot(steps_day, type = "h", lwd = 3, lend = square)
plot(steps_day, type = "h", lwd = 3, lend = "square")
plot(steps_day, type = "h", lwd = 4, lend = "square")
plot(steps_day, type = "h", lwd = 10, lend = "square")
plot(aggregate(steps ~ interval, data = activity, FUN = mean), type = "l")
max(aggregate(steps ~ interval, data = activity, FUN = sum))
max(activity$steps, na.rm = TRUE)
q()
